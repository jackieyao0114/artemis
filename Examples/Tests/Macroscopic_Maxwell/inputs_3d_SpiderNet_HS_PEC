####################################################################################################
## This input file simulates the simplified TRL
## Superconducting metal is simplified to PEC
## The plane wave excitation is the time-dependent modified Gaussian pulse
## This input file requires USE_LLG=FALSE in the GNUMakefile.
####################################################################################################

################################
####### GENERAL PARAMETERS ######
#################################
max_step = 30000
# number of cells must be consistent to my_constants.nx_cell, ny_cell and nz_cell
amr.n_cell = 512 128 1024 # number of cells spanning the domain in each coordinate direction at level 0
amr.max_grid_size = 64 # maximum size of each AMReX box, used to decompose the domain
amr.blocking_factor = 8 # only meaningful for AMR
geometry.coord_sys = 0

# total dimention in x is summation: 2*my_constants.gap_cpw + my_constants.width_line + 2*my_constants.width_gnd
# total dimension in y is CPW length: my_constants.length_cpw
# total dimenion in z has no direct relation with the geometries, z dimension needs to be large enough to encompass all leackage fields
# x,y,z dimension must be consistent w/ my_constants.x_domain; y_domain; z_domain
geometry.prob_lo = -36.0e-6 -10.0e-2 -50.0e-6 # must be consistent with .diag_hi/lo
geometry.prob_hi =  36.0e-6  10.0e-2  50.0e-6

amr.max_level = 0

my_constants.pi = 3.14159265359
my_constants.c = 299792458.

# domain sizes and cell numbers separately defined for easier excitation function definition
my_constants.x_domain = 72.0e-6 # total x-dimension of entire simulation domain 
my_constants.y_domain = 20.0e-2 # total y-dimension of entire simulation domain 
my_constants.z_domain = 100.0e-6 # total z-dimension of entire simulation domain 
my_constants.nx_cell = 512 # total number of cells in x direction 
my_constants.ny_cell = 128 # total number of cells in y direction
my_constants.nz_cell = 1024 # total number of cells in z direction

my_constants.th_si = 30.0e-6 # thickness of the silicon substrate is 70um
my_constants.th_nb = 250.0e-9 # thickness of niobium metal is 250nm
my_constants.gap_chip = 3.25e-6 # gap between silicon surfaces of wiring & qubit chips
my_constants.gap_cpw = 6.0e-6 # air gap of CPW
my_constants.width_line = 10.0e-6 # line width of CPW
my_constants.width_gnd = 25.0e-6 # width of each ground patch
my_constants.length_cpw = 20.0e-2 # length of CPW in longitudinal direction

my_constants.wavelength = 0.0545 # center frequency is 5.5 GHz
my_constants.TP = 5.4545e-10 # Gaussian pulse width, 3 x time period of excitation
my_constants.flag_none = 0 # no source flag
my_constants.flag_hs = 1 # hard source flag
my_constants.flag_ss = 2 # soft source flag
my_constants.epr = 11.7 # relative permittivity of ferrite slab

#################################
############ NUMERICS ###########
#################################
warpx.verbose = 0
warpx.use_filter = 0
warpx.cfl = 0.8
boundary.field_lo = pml pec pml # PML at -x to extend GND patches; PEC at -y end to superimpose waveguide port; PML at -z end to extend Si substrate;
boundary.field_hi = pml pml pml # PML at +x to extend GND patches; PML at +y end to extend the TRL; PML at -z end to extend Si substrate;
particles.nspecies = 0

algo.em_solver_medium = macroscopic # vacuum/macroscopic

algo.macroscopic_sigma_method = laxwendroff # laxwendroff or backwardeuler

macroscopic.sigma_init_style = "parse_sigma_function" # parse or "constant"
macroscopic.sigma_function(x,y,z) = "0.0" # Nb is approximately PEC, with infinite conductivity
macroscopic.epsilon_init_style = "parse_epsilon_function" # parse or "constant"
macroscopic.epsilon_function(x,y,z) = "epr * 8.8541878128e-12 * (z<=-z_domain/2+th_si)" # EPr is 11.7 for silicon
macroscopic.mu_init_style = "parse_mu_function" # parse or "constant"
macroscopic.mu_function(x,y,z) = "1.25663706212e-06" # nonmagnetic material allover

#################################
############ FIELDS #############
#################################

# vertical electric voltage excitation superimposed with PEC at one end of CPW
# in the waveform of modified Gaussian pulse
warpx.E_excitation_on_grid_style = "parse_E_excitation_grid_function"
warpx.Ex_excitation_grid_function(x,y,z,t) = " 0.0 * (y < -length_cpw/2 + y_domain/ny_cell) + 0.0 * (z < -z_domain/2 + th_si + th_nb + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si + th_nb - z_domain/nz_cell/2) * (x < -x_domain/2 + width_gnd) + 0.0 * (z < -z_domain/2 + th_si + th_nb + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si + th_nb - z_domain/nz_cell/2) * (x > -width_line/2) * (x < width_line/2) + 0.0 * (z < -z_domain/2 + th_si + th_nb + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si + th_nb - z_domain/nz_cell/2) * (x > x_domain/2 - width_gnd) + 0.0 * (z < -z_domain/2 + th_si + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si - z_domain/nz_cell/2) * (x < -x_domain/2 + width_gnd) + 0.0 * (z < -z_domain/2 + th_si + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si - z_domain/nz_cell/2) * (x > -width_line/2) * (x < width_line/2) + 0.0 * (z < -z_domain/2 + th_si + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si - z_domain/nz_cell/2) * (x > x_domain/2 - width_gnd) "

warpx.Ey_excitation_grid_function(x,y,z,t) = "0.0 * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > -x_domain/2 + width_gnd - x_domain/nx_cell/2) * (x < -x_domain/2 + width_gnd + x_domain/nx_cell/2) + 0.0 * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > -width_line/2 - x_domain/nx_cell/2) * (x < -width_line/2 + x_domain/nx_cell/2) + 0.0 * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > width_line/2 - x_domain/nx_cell/2) * (x < width_line/2 + x_domain/nx_cell/2) + 0.0 * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > x_domain/2 - width_gnd - x_domain/nx_cell/2) * (x < x_domain/2 - width_gnd + x_domain/nx_cell/2) + 0.0 * (z < -z_domain/2 + th_si + th_nb + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si + th_nb - z_domain/nz_cell/2) * (x < -x_domain/2 + width_gnd) + 0.0 * (z < -z_domain/2 + th_si + th_nb + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si + th_nb - z_domain/nz_cell/2) * (x > -width_line/2) * (x < width_line/2) + 0.0 * (z < -z_domain/2 + th_si + th_nb + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si + th_nb - z_domain/nz_cell/2) * (x > x_domain/2 - width_gnd) + 0.0 * (z < -z_domain/2 + th_si + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si - z_domain/nz_cell/2) * (x < -x_domain/2 + width_gnd) + 0.0 * (z < -z_domain/2 + th_si + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si - z_domain/nz_cell/2) * (x > -width_line/2) * (x < width_line/2) + 0.0 * (z < -z_domain/2 + th_si + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si - z_domain/nz_cell/2) * (x > x_domain/2 - width_gnd) "

warpx.Ez_excitation_grid_function(x,y,z,t) = "1.0 * (exp(-(t-3*TP)**2/(2*TP**2))*cos(2*pi*c/wavelength*t)) * (x < width_line/2 + gap_cpw + width_gnd/2) * (x > -width_line/2 - gap_cpw - width_gnd/2) * (z >= - z_domain/2) * (z < - z_domain/2 + 2*th_si + th_nb) * (y < -length_cpw/2 + y_domain/ny_cell) + 0.0 * (y < -length_cpw/2 + y_domain/ny_cell) + 0.0 * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > -x_domain/2 + width_gnd - x_domain/nx_cell/2) * (x < -x_domain/2 + width_gnd + x_domain/nx_cell/2) + 0.0 * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > -width_line/2 - x_domain/nx_cell/2) * (x < -width_line/2 + x_domain/nx_cell/2) + 0.0 * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > width_line/2 - x_domain/nx_cell/2) * (x < width_line/2 + x_domain/nx_cell/2) + 0.0 * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > x_domain/2 - width_gnd - x_domain/nx_cell/2) * (x < x_domain/2 - width_gnd + x_domain/nx_cell/2)"

warpx.Ex_excitation_flag_function(x,y,z) = "flag_none + flag_hs * (y < -length_cpw/2 + y_domain/ny_cell) + flag_hs * (z < -z_domain/2 + th_si + th_nb + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si + th_nb - z_domain/nz_cell/2) * (x < -x_domain/2 + width_gnd) + flag_hs * (z < -z_domain/2 + th_si + th_nb + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si + th_nb - z_domain/nz_cell/2) * (x > -width_line/2) * (x < width_line/2) + flag_hs * (z < -z_domain/2 + th_si + th_nb + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si + th_nb - z_domain/nz_cell/2) * (x > x_domain/2 - width_gnd) + flag_hs * (z < -z_domain/2 + th_si + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si - z_domain/nz_cell/2) * (x < -x_domain/2 + width_gnd) + flag_hs * (z < -z_domain/2 + th_si + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si - z_domain/nz_cell/2) * (x > -width_line/2) * (x < width_line/2) + flag_hs * (z < -z_domain/2 + th_si + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si - z_domain/nz_cell/2) * (x > x_domain/2 - width_gnd) "

warpx.Ey_excitation_flag_function(x,y,z) = "flag_none + flag_hs * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > -x_domain/2 + width_gnd - x_domain/nx_cell/2) * (x < -x_domain/2 + width_gnd + x_domain/nx_cell/2) + flag_hs * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > -width_line/2 - x_domain/nx_cell/2) * (x < -width_line/2 + x_domain/nx_cell/2) + flag_hs * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > width_line/2 - x_domain/nx_cell/2) * (x < width_line/2 + x_domain/nx_cell/2) + flag_hs * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > x_domain/2 - width_gnd - x_domain/nx_cell/2) * (x < x_domain/2 - width_gnd + x_domain/nx_cell/2) + flag_hs * (z < -z_domain/2 + th_si + th_nb + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si + th_nb - z_domain/nz_cell/2) * (x < -x_domain/2 + width_gnd) + flag_hs * (z < -z_domain/2 + th_si + th_nb + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si + th_nb - z_domain/nz_cell/2) * (x > -width_line/2) * (x < width_line/2) + flag_hs * (z < -z_domain/2 + th_si + th_nb + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si + th_nb - z_domain/nz_cell/2) * (x > x_domain/2 - width_gnd) + flag_hs * (z < -z_domain/2 + th_si + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si - z_domain/nz_cell/2) * (x < -x_domain/2 + width_gnd) + flag_hs * (z < -z_domain/2 + th_si + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si - z_domain/nz_cell/2) * (x > -width_line/2) * (x < width_line/2) + flag_hs * (z < -z_domain/2 + th_si + z_domain/nz_cell/2) * (z > -z_domain/2 + th_si - z_domain/nz_cell/2) * (x > x_domain/2 - width_gnd) ""

warpx.Ez_excitation_flag_function(x,y,z) = "flag_none + flag_hs * (y < -length_cpw/2 + y_domain/ny_cell) + flag_hs * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > -x_domain/2 + width_gnd - x_domain/nx_cell/2) * (x < -x_domain/2 + width_gnd + x_domain/nx_cell/2) + flag_hs * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > -width_line/2 - x_domain/nx_cell/2) * (x < -width_line/2 + x_domain/nx_cell/2) + flag_hs * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > width_line/2 - x_domain/nx_cell/2) * (x < width_line/2 + x_domain/nx_cell/2) + flag_hs * (z < -z_domain/2 + th_si + th_nb) * (z > -z_domain/2 + th_si) * (x > x_domain/2 - width_gnd - x_domain/nx_cell/2) * (x < x_domain/2 - width_gnd + x_domain/nx_cell/2)"

#Diagnostics
diagnostics.diags_names = plt_spidernet0521_

plt_spidernet0521_.intervals = 5
#plt_spidernet0521_.diag_lo = 0.0 0.0 -250.e-3
#plt_spidernet0521_.diag_hi = 0.0 0.0  250.e-3
plt_spidernet0521_.diag_type = Full
plt_spidernet0521_.fields_to_plot = Ex Ey Ez Hx Hy Hz